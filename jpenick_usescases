Name: programmer stops the project from running
Actor: user
Preconditions: program is running
Flow of Events:
	- User hits stop button above canvas area
	- [internal] button sends event to project script
	- terminate project script
Alternatives: N/A
Postconditions: running project is stopped
______________________________________
Name: programmer creates a list
Actor: user
Preconditions: program is running
Flow of Events:
	- User clicks data tab
	- user selects button "Create a List"
	- user is prompted for listName and scope
	- program displays list name and available methods
	- program displays visual representation of list on the canvas
Alternatives: user exits during prompt
Postconditions: list is created
______________________________________
Name: programmer deletes a list
Actor: user
Preconditions: list is created, project is not running
Flow of Events:
	- user clicks data tab
	- interface displays created lists (and the option to make a new list)
	- user right clicks on list to delete
	- drop down menu from right click
	- user selects "delete list"
	- confirm action from user
	- user confirms
	- list is deleted
Alternatives: user cancels confirmation, project is running while user attempts delete
Postconditions: list is deleted
_____________________________________
Name programmer adds to a list
Actor: user
Preconditions: list is created, project is not running, function creation underway ("event" piece already in working area)
Flow of Events:
	- user selects data tab
	- interface displays created lists (and the option to make a new list)
	- beneath created lists, interface displays available methods for list objects
	- user types item to add in textbox on add piece
	- user selects name of list to add to from drop down menu on add piece
	- user drags "add" method to working area, attaches to function
	- user runs project
	- function of project adds item to list
Alternatives: "add" method not attached to function (no action), user does not type in textbox (default item), user does not select list from drop down menu (default list)
Postconditions: an item is added to the list
_____________________________________
Name: programmer removes a value from a list
Actor: user
Preconditions: a list exists with items inside it
Flow of Events:
	- user selects data tab
	- interface displays created lists (and the option to make a new list)
	- beneath created lists, interface displays available methods for list objects
	- user types item to remove in textbox on remove piece
	- user selects name of list to remove to from drop down menu on remove piece
	- user drags "remove" method to working area, attaches to function
	- user runs project
	- function of project removes item to list
Alternatives: "remove" method not attached to function (no action), user does not type in textbox (default item), user does not select list from drop down menu (default list)
Postconditions: an item is removed from the list
____________________________________
Name: programmer inserts a value into a list
Actor: user
Preconditions: a list exists with items inside it
Flow of Events:
	- user selects data tab
	- interface displays created lists (and the option to make a new list)
	- beneath created lists, interface displays available methods for list objects
	- user types item to insert in textbox on insert piece
	- user selects index to insert item at from drop down menu on insert piece
	- user selects name of list to insert into from drop down menu on insert piece
	- user drags "insert" method to working area, attaches to function
	- user runs project
	- function of project inserts item into list
Alternatives: "insert" method not attached to function (no action), user does not type in textbox (default item), user does not select list from drop down menu (default list)
Postconditions: an item is inserted into the list
____________________________________
Name: programmer replaces a value in the list
Actor: user
Preconditions: a list exists with items inside it
Flow of Events:
	- user selects data tab
	- interface displays created lists (and the option to make a new list)
	- beneath created lists, interface displays available methods for list objects
	- user types item to replace in textbox on replace piece
	- user selects name of list to replace item in from drop down menu on replace piece
	- user drags "replace" method to working area, attaches to function
	- user runs project
	- function of project replaces item in list
Alternatives: "replace" method not attached to function (no action), user does not type in textbox (default item), user does not select list from drop down menu (default list)
Postconditions: an item is replaced in the list
