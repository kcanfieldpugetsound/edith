Functional requirements/use cases
- Sprite object (variable)
	- delete [Vikram]
	- add [Vikram]
	- edit [Walker]
- Create new method [Graham]
- Save method [Graham]
- Delete method [Graham]
- Export project [Vikram]
- Import Project [Vikram]
- Running project 
	- play [Eli]
	- pause [Eli]
	- step [Steve]
	- stop [Jessica]
- While loops [Eli]
- Drag/drop [Walker]
- Conditionals [Walker]
- Lists [Jessica]
- Boolean operators [Steve]
- Print [Steve] 


Non-functional requirements
- operators (mathematical & logical)
	- <, >, =, +, -, *, /, mod, sqrt, true, false
- string parsing 
- subroutine - Parameters

Actors:
- user
- developers 

Name: Edit variable
Actor(s): End user
Preconditions/assumptions: Add method which does have a variable parameter.
Flow of events: User selects variable, changes the parameter. Check type, if it is compatible, allow input and save parameter, if input is incorrect wait for user to correct, or they will exit. 
Alternatives: Incorrect inputs may include boundary warnings or wrong types.
Postconditions: Variable is defined.

Name: Dragging and dropping functionality for variables
Actor(s): End user
Preconditions/assumptions: There is a variable for which it is possible to be selected.
Flow of events: User creates new variable and selects it. They can now drag and drop the variable in the boundaries provided.
Alternatives: The user attempts to drag the variable outside of acceptable boundaries, the variable will no be able to be dragged outside of boundary.
Postcondition: Variable is now ready to be use.

Name: Conditional statement functionality
Actor(s): End user & developer
Preconditions/assumptions: 
Flow of events: A user or developer decides they want to use a conditional statement, add the conditional statement, including the parameter (e.g. if this), then defines what is inside of this if-statement (e.g. then that).
Alternatives: The user or developer may specify what will happen if the if-statement's parameter is not met (e.g. else do this).
Postconditions: The if-statement is then either done because its parameter is met or its skipped because it is not met.

Name: Boolean Operators
Actor(s): End user & developer
Preconditions/assumptions: 
Flow of events: A user or developer wants to perform an operation (e.g. and, or, not) on one or two variables or expressions. The user selects the boolean operator and the variable(s) or expression(s) to be evaluated.
Alternatives: 
Postconditions: The boolean result of the operation is returned.

Name: Print
Actor(s): End user 
Preconditions/assumptions: The user has created a script
Flow of events: A user or developer wants to print the script he has created.  The user selects the option to print the script, and it is printed.
Postconditions: No changes are made; the status is the same as prior to printing.
